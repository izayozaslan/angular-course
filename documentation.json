{
    "pipes": [
        {
            "name": "MyFilteringPipe",
            "id": "pipe-MyFilteringPipe-d4d4dabb812aab440bb4de3eebb7184f",
            "file": "src/libs/custom-pipes/my-filtering.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string[]"
                        },
                        {
                            "name": "args",
                            "type": "unknown[]",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "unknown[]",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "myFiltering",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'myFiltering'\n})\nexport class MyFilteringPipe implements PipeTransform {\n\n  transform(value: string[], ...args: unknown[]): unknown {\n    let result : any[] = [];\n\n    value.forEach(element => {\n      const isExistLetter = element.includes(args[0].toString());\n      if (isExistLetter) {\n        result.push(element);\n      }\n    });\n    return result;\n  }\n\n}\n"
        },
        {
            "name": "TlPipe",
            "id": "pipe-TlPipe-31572b776400c0133f72c47ab42fb77c",
            "file": "src/libs/custom-pipes/tl.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "unknown"
                        },
                        {
                            "name": "args",
                            "type": "unknown[]",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "unknown",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "unknown[]",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "tl",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'tl'\n})\nexport class TlPipe implements PipeTransform {\n\n  transform(value: unknown, ...args: unknown[]): unknown {\n    return \"tl\" + value;\n  }\n\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "city",
            "id": "interface-city-96540a03894c9f2e1e03069b509ba056",
            "file": "src/libs/services/map.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\n\n\ninterface city {\n  id: number;\n  name: string;\n  plaka: number;\n  region: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapService {\n\n\n  cities = [\n\n    {\n      id: 1,\n      name: \"İstanbul\",\n      region: \"Marmara\",\n      plaka: 34\n    },\n    {\n      id: 2,\n      name: \"İzmir\",\n      region: \"Ege\",\n      plaka: 35\n    },\n    {\n      id: 3,\n      name: \"Ankara\",\n      region: \"Anadolu\",\n      plaka: 6\n    }\n];\n\n  public cityNameSubject = new Subject<any>();\n  public cityPlakaSubject = new Subject<any>();\n  public cityRegionSubject = new Subject<any>();\n\n  private cityNameDataSubject$: BehaviorSubject<any> = new BehaviorSubject([]);\n  cityNameDataSubject = this.cityNameDataSubject$.asObservable();\n\n\n  constructor() { }\n\n  getCityNames(){\n    const data = this.cities.map(elem => ({\n      id: elem.id,\n      name: elem.name\n    }));\n    this.cityNameSubject.next(data);\n    //this.cityNameDataSubject$.next(data);\n  \n  }\n\n  getCityPlakas(){\n    const data = this.cities.map(elem => ({\n      id: elem.id,\n      name: elem.name,\n      plaka: elem.plaka\n    }));\n    this.cityPlakaSubject.next(data);\n\n  }\n\n  getCityRegions(){\n    const data = this.cities.map(elem => ({\n      id: elem.id,\n      name: elem.name,\n      region: elem.region\n    }));\n    this.cityRegionSubject.next(data);\n\n  }\n\n  save(value : city){\n    const index = this.cities.findIndex(el => el.id === value.id);\n    if (index > -1) {\n      this.cities[index] = value;\n    } else {\n      this.cities.push(value);  \n    }\n\n    this.getCityNames();\n    this.getCityPlakas();\n    this.getCityRegions();\n\n\n  } \n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "plaka",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "region",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "MapService",
            "id": "injectable-MapService-96540a03894c9f2e1e03069b509ba056",
            "file": "src/libs/services/map.service.ts",
            "properties": [
                {
                    "name": "cities",
                    "defaultValue": "[\n\n    {\n      id: 1,\n      name: \"İstanbul\",\n      region: \"Marmara\",\n      plaka: 34\n    },\n    {\n      id: 2,\n      name: \"İzmir\",\n      region: \"Ege\",\n      plaka: 35\n    },\n    {\n      id: 3,\n      name: \"Ankara\",\n      region: \"Anadolu\",\n      plaka: 6\n    }\n]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "cityNameDataSubject",
                    "defaultValue": "this.cityNameDataSubject$.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "cityNameDataSubject$",
                    "defaultValue": "new BehaviorSubject([])",
                    "type": "BehaviorSubject<any>",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "cityNameSubject",
                    "defaultValue": "new Subject<any>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "cityPlakaSubject",
                    "defaultValue": "new Subject<any>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "cityRegionSubject",
                    "defaultValue": "new Subject<any>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCityNames",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "getCityPlakas",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "getCityRegions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "value",
                            "type": "city"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "city",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\n\n\ninterface city {\n  id: number;\n  name: string;\n  plaka: number;\n  region: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapService {\n\n\n  cities = [\n\n    {\n      id: 1,\n      name: \"İstanbul\",\n      region: \"Marmara\",\n      plaka: 34\n    },\n    {\n      id: 2,\n      name: \"İzmir\",\n      region: \"Ege\",\n      plaka: 35\n    },\n    {\n      id: 3,\n      name: \"Ankara\",\n      region: \"Anadolu\",\n      plaka: 6\n    }\n];\n\n  public cityNameSubject = new Subject<any>();\n  public cityPlakaSubject = new Subject<any>();\n  public cityRegionSubject = new Subject<any>();\n\n  private cityNameDataSubject$: BehaviorSubject<any> = new BehaviorSubject([]);\n  cityNameDataSubject = this.cityNameDataSubject$.asObservable();\n\n\n  constructor() { }\n\n  getCityNames(){\n    const data = this.cities.map(elem => ({\n      id: elem.id,\n      name: elem.name\n    }));\n    this.cityNameSubject.next(data);\n    //this.cityNameDataSubject$.next(data);\n  \n  }\n\n  getCityPlakas(){\n    const data = this.cities.map(elem => ({\n      id: elem.id,\n      name: elem.name,\n      plaka: elem.plaka\n    }));\n    this.cityPlakaSubject.next(data);\n\n  }\n\n  getCityRegions(){\n    const data = this.cities.map(elem => ({\n      id: elem.id,\n      name: elem.name,\n      region: elem.region\n    }));\n    this.cityRegionSubject.next(data);\n\n  }\n\n  save(value : city){\n    const index = this.cities.findIndex(el => el.id === value.id);\n    if (index > -1) {\n      this.cities[index] = value;\n    } else {\n      this.cities.push(value);  \n    }\n\n    this.getCityNames();\n    this.getCityPlakas();\n    this.getCityRegions();\n\n\n  } \n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 45
            },
            "type": "injectable"
        },
        {
            "name": "RoleService",
            "id": "injectable-RoleService-88b32fb8468c844dcc86e15fd158ccea",
            "file": "src/libs/services/role.service.ts",
            "properties": [
                {
                    "name": "connection",
                    "defaultValue": "environment.api.nestjs.role + \"/role\"",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "addRole",
                    "args": [
                        {
                            "name": "role",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteRole",
                    "args": [
                        {
                            "name": "role",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editRole",
                    "args": [
                        {
                            "name": "role",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoleService {\n\n  connection = environment.api.nestjs.role + \"/role\";\n  constructor(private http: HttpClient) { }\n\n  getAllRoles(){\n    return this.http.get<any>(this.connection);\n\n  }\n\n  addRole(role: any) {\n    return this.http.post<any>(this.connection, role);\n\n  }\n\n  editRole(role:any) {\n    return this.http.put<any>(this.connection + '/${role.id}', role);\n  }\n\n  deleteRole(role:any) {\n    return this.http.delete<any>(this.connection + '/${role.id}', role);\n  }\n  \n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-90b1a0cb5aa8f9493cb6457dd295b849",
            "file": "src/libs/services/user.service.ts",
            "properties": [
                {
                    "name": "connection",
                    "defaultValue": "environment.api.nestjs.role",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "users",
                    "defaultValue": "[\"ahmet\" , \"kerem\"]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "getAllUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "isExistName",
                    "args": [
                        {
                            "name": "val",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { of } from \"rxjs\";\r\nimport { environment } from \"src/environments/environment\";\r\n\r\n@Injectable({\r\n    providedIn: \"root\"\r\n})\r\nexport class UserService {\r\n    users = [\"ahmet\" , \"kerem\"];\r\n    isLoggedIn = false;\r\n\r\n    connection = environment.api.nestjs.role;\r\n    constructor(private http: HttpClient) { }\r\n\r\n\r\n    isExistName(val:string) {\r\n        if (this.users.indexOf(val) > -1){\r\n            return of(true);\r\n        } else {\r\n            return of (false);\r\n        }\r\n    }\r\n\r\n    getAllUsers(){\r\n        return this.http.get<any>(this.connection + \"/user\");\r\n    \r\n      }\r\n\r\n    login() {\r\n\r\n        const user = {\r\n            \"email\": \"ahmetaydin@udemy.com.tr\",\r\n            \"password\": \"1111\"\r\n        }\r\n        return this.http.post<any>(this.connection + \"/login\", user);\r\n    }\r\n\r\n    logOut(){\r\n        localStorage.removeItem(\"token\");\r\n    }\r\n\r\n    getToken(){\r\n       const token = localStorage.getItem(\"token\");\r\n       if(token) {\r\n           return token;\r\n       } else {\r\n           this.login().subscribe(data => {\r\n               localStorage.setItem(\"token\", data.value);\r\n               this.getToken();\r\n\r\n            });\r\n       }\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "HighlightDirective",
            "id": "directive-HighlightDirective-9da48bb9df8374eaf3f3501a58ebe47c",
            "file": "src/libs/custom-directives/highlight.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n\n@Directive({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n  @Input() highlightColor: string;\n\n  constructor(private el:ElementRef){\n    el.nativeElement.style.backgroundColor = this.highlightColor;\n\n  }\n\n  //@HostListener('mouseenter') onMouseEnter() {\n  //  this.highlight('yellow');\n  //}\n\n  //@HostListener('mouseleave') onMouseLeave() {\n  //  this.highlight(\"orange\");\n  //}\n\n  @HostListener('mouseenter') onMouseEnter() {\n    //this.makeInvisible();\n    //this.makeBigger();\n    this.el.nativeElement.style.backgroundColor = this.highlightColor;\n  }\n\n  @HostListener('mouseleave') onMouseLeave() {\n    //this.makeVisible();\n    //this.makeSmaller();\n    this.el.nativeElement.style.backgroundColor = this.highlightColor;\n  }\n\n\n  private highlight (color: string) {\n    this.el.nativeElement.style.backgroundColor = color;\n  }\n\n  makeVisible() {\n    this.el.nativeElement.style = \"visibility:visible\";\n  }\n\n  makeInvisible() {\n    this.el.nativeElement.style = \"visibility:hidden\";\n  }\n\n  makeBigger() {\n    this.el.nativeElement.style = \"font-size:2rem\";\n  }\n\n  makeSmaller() {\n    this.el.nativeElement.style = \"font-size:0.8rem\";\n  }\n\n}\n",
            "selector": "[appHighlight]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "highlightColor",
                    "line": 8,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "line": 23
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "line": 29
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "highlight",
                    "args": [
                        {
                            "name": "color",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "makeBigger",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48
                },
                {
                    "name": "makeInvisible",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "makeSmaller",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "makeVisible",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-567754ac1f412da14b50cc08da8b6973",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'angular-course'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "translateService",
                    "type": "TranslateService",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "setLanguage",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSpinner",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "showSuccess",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ToastrService } from 'ngx-toastr';\nimport {NgxSpinnerService} from \"ngx-spinner\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  \n  title = 'angular-course';\n\n  constructor( \n  private toastr: ToastrService ,\n  private spinner: NgxSpinnerService,\n  public translateService: TranslateService\n  ){\n    translateService.setDefaultLang('en');\n    translateService.use('en');\n  }\n\n  ngOnInit(): void {\n    this.showSuccess();\n    this.showSpinner();\n  }\n\n  showSuccess() {\n    this.translateService.onLangChange.subscribe(resp => {\n      const title = this.translateService.instant(\"toaster.title\");\n      const message = this.translateService.instant(\"toaster.message\");\n      this.toastr.success(title, message);\n    });\n  }\n\n  showSpinner(){\n    this.spinner.show();\n    setTimeout(() => {\n      this.spinner.hide();\n    }, 1000);\n  }\n\n  setLanguage(lang:string){\n    this.translateService.use(lang);\n  }\n  \n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "toastr",
                        "type": "ToastrService"
                    },
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService"
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-navbar [lang]=\"translateService.currentLang\" (langCahnge)=\"setLanguage($event)\"></app-navbar>\n\n<div class=\"row\">\n  <div class=\"col-md-3\">\n   <app-sidebar></app-sidebar> \n  </div>\n\n<div class=\"col-md-9\">\n  <router-outlet></router-outlet>\n</div>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-6b2fd1a41a7e1f475acb7a6e62eedea4-1",
            "file": "src/app/storybook/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "text",
                    "defaultValue": "\"default\"",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss']\n})\nexport class ButtonComponent implements OnInit {\n  \n  @Input() text: string = \"default\";\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<button igxButton=\"flat\">{{text}}</button>\n<button igxButton=\"raised\">{{text}}</button>\n<button igxButton=\"outlined\">{{text}}</button>"
        },
        {
            "name": "Child1Component",
            "id": "component-Child1Component-98194cb985dbce6cbb2a0e7205075792",
            "file": "src/libs/child-components/child1/child1.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-child1",
            "styleUrls": [
                "./child1.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./child1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "line": 9,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "resetForm",
                    "defaultValue": "new EventEmitter()",
                    "line": 10,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "alertSth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "emitForm",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, OnInit, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-child1',\n  templateUrl: './child1.component.html',\n  styleUrls: ['./child1.component.scss']\n})\nexport class Child1Component implements OnInit {\n  @Input() data: any;\n  @Output() resetForm : EventEmitter<any> = new EventEmitter();\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  emitForm(event){\n    this.resetForm.emit(event);\n  }\n  \n  alertSth(){\n    alert(\"Childı tetiklediniz.\");\n    console.log(\"tetiklediniz\");\n    this.data = {\n      name: \"triggered\",\n      status: false\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./child1.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"data\">{{ data?.name }} kişisi\n    <p *ngIf=\"data?.status\">Başarılıdır</p>\n    <p *ngIf=\"!data?.status\">Başarısızdır</p>\n</div>\n<!--<button (click)=\"emitForm($event)\">RESET</button>-->\n<button (click)=\"resetForm.emit(data.name)\">RESET</button>"
        },
        {
            "name": "CityComponent",
            "id": "component-CityComponent-1030fc8008d5dfc6498ae09de33d5020",
            "file": "src/app/map/city/city.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-city",
            "styleUrls": [
                "./city.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./city.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "citiesData",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { MapService } from 'src/libs';\n\n@Component({\n  selector: 'app-city',\n  templateUrl: './city.component.html',\n  styleUrls: ['./city.component.scss']\n})\nexport class CityComponent implements OnInit {\n\n  citiesData;\n  //citiesData$;\n  constructor(private mapService: MapService) { \n   mapService.cityNameSubject.subscribe(data => {\n    this.citiesData = data;\n   });\n  // this.citiesData$ = mapService.cityNameDataSubject;\n}\n\n  ngOnInit() {\n  this.mapService.getCityNames();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./city.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mapService",
                        "type": "MapService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\n    <h4>Şehirler</h4>\n    <div class=\"col-md-12\">\n        <ul>\n            <li *ngFor=\"let city of citiesData\">{{ city.id }} - {{ city.name }}</li>\n        </ul>\n    </div>\n    \n</div>"
        },
        {
            "name": "CookieComponent",
            "id": "component-CookieComponent-d2bfa98a3c6c0be56064b5a2644d35f4",
            "file": "src/app/storage/cookie/cookie.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cookie",
            "styleUrls": [
                "./cookie.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cookie.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cookieValue",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "isCookieExist",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "checkNameCookie",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "clearAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "clearItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "getItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "setItem",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Component({\n  selector: 'app-cookie',\n  templateUrl: './cookie.component.html',\n  styleUrls: ['./cookie.component.scss']\n})\nexport class CookieComponent implements OnInit {\nname=\"\";\ncookieValue = \"\";\nisCookieExist;\n\n  constructor(private cookieService: CookieService) { }\n\n  ngOnInit(): void {\n  }\n\n  setItem(value){\n    this.cookieService.set( 'name', value );\n  }\n\n  getItem(){\n    this.cookieValue = this.cookieService.get(\"name\");\n  }\n\n  clearItem(){\n    this.cookieService.delete('name');\n  }\n\n  clearAll(){\n    this.cookieService.deleteAll();\n  }\n\n  checkNameCookie(){\n    this.isCookieExist = this.cookieService.check('name');\n    \n  }\n\n  \n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./cookie.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cookieService",
                        "type": "CookieService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"margin: 2rem;\">\n    <div class=\"row\">\n        <div class=\"col-md-5\">\n            <input type=\"text\" [(ngModel)]=\"name\">\n            <br/>\n            <button (click)=\"setItem(name)\">Set Item</button>\n            <button (click)=\"getItem()\">Get Item</button>\n            <button (click)=\"clearItem()\">claer Item</button>\n            <button (click)=\"clearAll()\">claer Item</button>\n            <button (click)=\"checkNameCookie()\">check cookie</button>   \n            <p>name : {{name}}</p>\n            <p>cookie value: {{cookieValue}}</p>\n            <p>isExist: : {{isCookieExist}}</p>\n        \n        </div>\n        <div class=\"col-md-2\">\n            <button [routerLink]=\"['../local-storage']\">Go to local storage page</button>\n        </div>\n    </div>>    \n</div>\n\n"
        },
        {
            "name": "DataBindingComponent",
            "id": "component-DataBindingComponent-557f38f67fefe0640618c5d004423af2",
            "file": "src/app/data-binding/data-binding.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-data-binding",
            "styleUrls": [
                "./data-binding.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./data-binding.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "type",
                    "defaultValue": "\"text\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "user",
                    "defaultValue": "{\n    name:\"Ahmet\",\n    surname:\"Aydın\",\n    job:\"Developer\",\n    fav_place:\"Kız kulesi\",\n    fav_place_img:\"https://www.uskudar.bel.tr/tr/main/pages/kiz-kulesi/35\",\n    isEditable:true,\n\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "buttonClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "inputSubmit",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-data-binding',\n  templateUrl: './data-binding.component.html',\n  styleUrls: ['./data-binding.component.scss']\n})\nexport class DataBindingComponent implements OnInit {\n\n  user={\n    name:\"Ahmet\",\n    surname:\"Aydın\",\n    job:\"Developer\",\n    fav_place:\"Kız kulesi\",\n    fav_place_img:\"https://www.uskudar.bel.tr/tr/main/pages/kiz-kulesi/35\",\n    isEditable:true,\n\n  };\n\n  type=\"text\";\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  buttonClicked(){\n    alert(\"Clicked\");\n  }\n\n  inputSubmit(value:any){\n    alert(value.target.value + \"geldi..\");\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".red{\r\n    color: red;\r\n}",
                    "styleUrl": "./data-binding.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\n    <div class=\"col-md-12\">\n\n        <h4>One Way Binding <span style=\"font-size:0.9rem;\"></span></h4>\n        <div class=\"row\">\n            <div class=\"col-md-2\">\n                <h5>Interpolation</h5>\n                <p>AD: {{user.name}} , Soyad: {{user.surname}}</p>\n            </div>\n            <div class=\"col-md-3\">\n                <h5>Property Binding</h5>\n                <input [type]=\"type\" [value]=\"user.job\"/>\n            </div>\n            <div class=\"col-md-3\">\n                <h5>Attribute Binding</h5>\n                <input [type]=\"type\" [value]=\"user.job\" [attr.disabled]=\"user.isEditable ? 'disabled' : null \">\n            </div>\n            <div class=\"col-md-2\">\n                <h5>Class Binding</h5>\n                <p [class.red]=\"user.name === 'Ahmet' ? true : false\">Renk değeri !!</p>\n            </div>\n            <div class=\"col-md-2\">\n                <h5>Style Binding</h5>\n                <p [style.color]=\"user.name === 'Ahmet' ? 'orange' : 'blue'\">Style Color !!</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"col-md-12\">\n        <h4>One Way Binding <span style=\"font-size:0.9rem;\">from DOM to component</span></h4>\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <h4>Event Binding</h4>\n                <input type=\"text\" [value]=\"user.name\" (keyup.enter)=\"inputSubmit($event)\"/>\n                <button (click)=\"buttonClicked()\">OK</button>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"col-md-12\">\n        <h2>\n            Two Way Binding\n        </h2>\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <h3>ngModel</h3>\n                <input type=\"text\" [(ngModel)]=\"user.name\">\n                <p>{{user.name}}</p>\n            </div>\n        </div>\n    </div>\n</div>\n"
        },
        {
            "name": "DirectivesComponent",
            "id": "component-DirectivesComponent-64191f2ee29d7dada4a56b8085644db4",
            "file": "src/app/directives/directives/directives.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-directives",
            "styleUrls": [
                "./directives.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./directives.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cities",
                    "defaultValue": "[\n    {\n      id:1,\n      name:\"İstanbul\",\n      region:\"Marmara\"\n    },\n    {\n      id:3,\n      name:\"İzmir\",\n      region:\"Ege\"\n    },\n    {\n      id:6,\n      name:\"Samsun\",\n      region:\"Karadeniz\"\n    }\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "color",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "name",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "username",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "changeTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-directives',\n  templateUrl: './directives.component.html',\n  styleUrls: ['./directives.component.scss']\n})\nexport class DirectivesComponent implements OnInit {\n\n  title = false;\n  name = \"\";\n  username=\"\";\n\n  cities= [\n    {\n      id:1,\n      name:\"İstanbul\",\n      region:\"Marmara\"\n    },\n    {\n      id:3,\n      name:\"İzmir\",\n      region:\"Ege\"\n    },\n    {\n      id:6,\n      name:\"Samsun\",\n      region:\"Karadeniz\"\n    }\n  ]\n\n  color=\"\";\n  constructor() { }\n\n  ngOnInit(): void {}\n\n  changeTitle() {\n    this.title = !this.title;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".red{\r\n    color:red;\r\n}\r\n.blue{\r\n    color:blue;\r\n}",
                    "styleUrl": "./directives.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 32
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"d-flex justify-content-center\">\n    <h3>ANgular Directives</h3>\n</div>\n<h3>Structural Directives</h3>\n\n<div class=\"row\">\n    <div class=\"col-md-4\">\n        <h4>*ngIf</h4>\n        <input type=\"text\" [(ngModel)]=\"name\">\n        <p *ngIf=\"title\">Title var..</p>\n        <p *ngIf=\"name === 'Ahmet'\">\n            isim Ahmet..\n        </p>\n        <button (click)=\"changeTitle();\">toggle</button>\n        <br>\n        <div *ngIf=\"title; then titleExist; else titleNotExist;\"></div>\n            <ng-template #titleExist>Title var</ng-template>\n            <ng-template #titleNotExist>Title yok</ng-template>\n    </div>\n    <div class=\"col-md-4\">\n        <h4>*ngSwitch</h4>\n        <input type=\"text\" [(ngModel)]=\"username\">\n        <br>\n        <ul [ngSwitch]=\"username\">\n            <li *ngSwitchCase=\"'Ahmet'\">Hello Ahmet</li>\n            <li *ngSwitchCase=\"'Kerem'\">Hello Kerem</li> \n            <li *ngSwitchDefault>Hello everyone</li>   \n\n        </ul>\n    </div>\n\n<div class=\"col-md-4\">\n    <h4>*ngFor</h4>\n    <ul>\n        <li *ngFor=\"let city of cities; let i = index\">\n            {{i}} - id : {{city.id}} <br />\n            name: {{city.name}} <br />\n            bölge: {{city.region}}\n        </li>\n    </ul>\n</div>\n</div>\n<h4>Attribute Directives</h4>\n<div class=\"row\">\n    <div class=\"col-md-6\">\n        <h4>[ngClass]</h4>\n        <input type=\"text\" [(ngModel)]=\"color\">\n        <p [ngClass]=\"color === 'red' ? 'red' : 'blue'\">Renk</p>\n        <p [ngClass]=\"{\n            red:color === 'red',\n            blue:color === 'blue'\n            }\"\n            class=\"purple\">Yeni renk</p>\n\n    </div>\n    <div class=\"col-md-6\">\n        <h4>[ngStyle]</h4>\n        <input type=\"text\" [(ngModel)]=\"color\"/>\n        <p [ngStyle]=\"{color:color}\">Style renk</p>\n        <p [ngStyle]=\"{color:color === 'Ahmet' ? 'red' : 'blue'}\">Style renk</p>\n\n    </div>\n</div>\n<h4>Custom Directives</h4>\n<div class=\"row\">\n    <div class=\"col-md-6\">\n        <p appHighlight>Highlight Directive Works</p>\n        <p appHighlight highlightColor=\"orange\">Orange Custom Directive</p>\n\n    </div>\n\n</div>\n\n"
        },
        {
            "name": "FormsComponent",
            "id": "component-FormsComponent-9e8d704f0a79ef6dd22773ed2efaf9c3",
            "file": "src/app/forms/forms/forms.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-forms",
            "styleUrls": [
                "./forms.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forms.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "registerForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "user",
                    "defaultValue": "{\n    username: \"ahmet\",\n    age: 27\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "randomUsername",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { BlackListValidator, UserNameExistValidator, WhiteSpaceValidator, UserService } from 'src/libs';\n\n@Component({\n  selector: 'app-forms',\n  templateUrl: './forms.component.html',\n  styleUrls: ['./forms.component.scss']\n})\nexport class FormsComponent implements OnInit {\n\n  registerForm:FormGroup;\n  user = {\n    username: \"ahmet\",\n    age: 27\n  };\n\n  constructor(private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.resetForm();\n  }\n\n  save(event:any){\n    this.user = event.value;\n  }\n\n  randomUsername(event:any){\n    this.registerForm.patchValue({\n      username: \"test-123\",\n      age: 123\n    });\n  }\n\n  resetForm(){\n    this.registerForm = new FormGroup({\n      username: new FormControl(this.user ? this.user.username : \"\", {\n        validators: [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(15),\n          BlackListValidator(\"ğ\"),\n          WhiteSpaceValidator\n        ],\n        asyncValidators:[UserNameExistValidator(this.userService)],\n        updateOn: \"change\"\n      }),\n      age: new FormControl(this.user ? this.user.age : 0)\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./forms.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\n    <h4>Reactive Forms-Register</h4>\n    <div class=\"col-md-12\">\n        <form [formGroup]=\"registerForm\" (ngSubmit)=\"save(registerForm)\">\n            <div class=\"col-md-12\">\n                \n                <p\n                    *ngIf=\"registerForm?.controls?.username?.errors?.required && \n                    registerForm?.controls?.username?.dirty\" style=\"color:red\">\n                    *Bu alan zorunludur!\n                </p>\n\n                <p\n                *ngIf=\"registerForm?.controls?.username?.errors?.blacklist && \n                registerForm?.controls?.username?.dirty\" style=\"color:red\">\n                *ğ kullanılmaz\n                </p>\n                \n                <p\n                    *ngIf=\"registerForm?.controls?.username?.errors?.whitespace && \n                    registerForm?.controls?.username?.dirty\" style=\"color:red\">\n                    Boşluk karakterini kullanamazsınız..\n                </p>\n\n                <p\n                    *ngIf=\"registerForm?.controls?.username?.errors?.userNameExist\" style=\"color:red\">\n                    Bu isim daha önce kullanılmıştır                \n                </p>\n\n                <label>\n                    User Name:\n                    <input type=\"text\" formControlName=\"username\">\n                </label>\n                <button (click)=\"randomUsername($event)\">username türet</button>\n            </div>\n            <div class=\"col-md-12\">\n                <label>\n                    Age:\n                    <input type=\"number\" formControlName=\"age\">\n                </label>\n                <br>\n                <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"!registerForm?.valid\" >Kayıt ol</button>\n            </div>\n        </form>\n    </div>\n</div>\n\n\n\n\n\n<!--\n<div class=\"container\">\n    <h2>Kayıt Formu</h2>\n    <form (ngSubmit)=\"save(myForm)\" #myForm=\"ngForm\" >\n        <div class=\"form-group\">\n            <label for=\"username\">İsim</label>\n            <input type=\"text\" class=\"form-control\" id=\"username\" name=\"username\" ngModel required>\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"age\">Yaş</label>\n            <input type=\"number\" class=\"form-control\" id=\"age\" name=\"age\" ngModel>\n        </div>\n\n        <button type=\"submit\" class=\"btn btn-success\">Kayıt ol</button>\n    </form>\n</div>\n-->"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-0368ba31f32dcbd90cb54a0bd661b89c",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>{{ \"app.title\" | translate }}</p>"
        },
        {
            "name": "LocalStorageComponent",
            "id": "component-LocalStorageComponent-a8687d7d5cce8f40e9bcc6eee8833ae3",
            "file": "src/app/storage/local-storage/local-storage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-local-storage",
            "styleUrls": [
                "./local-storage.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./local-storage.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "localStorageObjVal",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "localStorageVal",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "objAge",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "objName",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "objSurname",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "clearAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "clearItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "getItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "getObject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "setItem",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setObject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-local-storage',\n  templateUrl: './local-storage.component.html',\n  styleUrls: ['./local-storage.component.scss']\n})\nexport class LocalStorageComponent implements OnInit {\n\n  name=\"\";\n  localStorageVal=\"\";\n  localStorageObjVal;\n\n  objName=\"\";\n  objSurname=\"\";\n  objAge=\"\";\n\n  constructor() { }\n\n  ngOnInit(): void {}\n\n  setItem(value){\n    localStorage.setItem(\"name\",value);\n  }\n  getItem(){\n    this.localStorageVal = localStorage.getItem(\"name\");\n  }\n  clearItem(){\n    localStorage.removeItem(\"name\");\n  }\n  clearAll(){\n    localStorage.clear();\n  }\n  setObject(){\n    const obj = {\n      name:this.objName, \n      surname:this.objSurname, \n      age:this.objAge\n    };\n    localStorage.setItem(\"object\",JSON.stringify(obj));\n  }\n\n  getObject(){\n    this.localStorageObjVal = localStorage.getItem(\"object\");\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./local-storage.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"margin: 2rem;\">\n    <div class=\"row\">\n        <div class=\"col-md-5\">\n            <input type=\"text\" [(ngModel)]=\"name\"/>\n            <br/>\n            <button (click)=\"setItem(name)\">set Item</button>\n            <button (click)=\"getItem()\">get Item</button>\n            <button (click)=\"clearItem()\">clear Item</button>\n            <br/>\n            <p>ng model: {{name}}</p>\n            <p>Local Storage value: {{localStorageVal}}</p>\n        </div>\n        <div class=\"col-md-5\">\n            name: <input type=\"text\" [(ngModel)]=\"objName\"/><br/>\n            surname: <input type=\"text\" [(ngModel)]=\"objSurname\"/><br/>\n            age: <input type=\"text\" [(ngModel)]=\"objAge\"/><br/>\n            <button (click)=\"setObject()\">Set Obj</button>\n            <button (click)=\"getObject()\">Get Obj</button>\n            <br/>\n            obj value: {{localStorageObjVal}}\n        </div>\n    </div>\n    <div class=\"col-md-2\">\n        <button [routerLink]=\"['../cookie']\">Go to cookie page</button>\n    </div>\n</div>>\n\n\n\n"
        },
        {
            "name": "MapComponent",
            "id": "component-MapComponent-db9958ad7e100ffdaa38111307d6a6b9",
            "file": "src/app/map/map/map.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-map",
            "styleUrls": [
                "./map.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./map.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { MapService } from 'src/libs';\n\n@Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n  styleUrls: ['./map.component.scss']\n})\nexport class MapComponent implements OnInit {\n\n  constructor(private mapService: MapService) { }\n\n  ngOnInit(): void {\n  }\n\n  save(form: NgForm){\n    this.mapService.save(form.value);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./map.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mapService",
                        "type": "MapService"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\" style=\"margin: 2rem\">\n    <div class=\"col-md-9 offset-md-3\">\n        <form class=\"form-group\" #cityForm=\"ngForm\" (ngSubmit)=\"save(cityForm)\">\n            <div class=\"row\">\n                <div class=\"col-md-12 form-control\">\n                    <label for=\"id\">Id</label> \n                    <input type=\"number\" name=\"id\" ngModel>\n                </div>\n\n                <div class=\"col-md-12\">\n                    <label for=\"name\">Name</label> \n                    <input type=\"text\" name=\"name\" ngModel>\n                </div>\n\n                <div class=\"col-md-12\">\n                    <label for=\"region\">Region</label> \n                    <input type=\"text\" name=\"region\" ngModel>\n                </div>\n\n                <div class=\"col-md-12\">\n                    <label for=\"plaka\">Plaka</label> \n                    <input type=\"number\" name=\"plaka\" ngModel>\n                </div>\n\n                <button type=\"submit\">Kaydet</button>\n            </div>\n        </form>\n    </div>\n    <div class=\"col-md-4\">\n        <app-city></app-city>\n    </div>\n    <div class=\"col-md-4\">\n        <app-plaka></app-plaka>\n    </div>\n    <div class=\"col-md-4\">\n        <app-region></app-region>\n    </div>\n\n</div>"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-a5fad3fc501936b764ebd941e7d9239f",
            "file": "src/app/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navbar",
            "styleUrls": [
                "./navbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "lang",
                    "line": 11,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "langChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 12,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "toggleLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { UserService } from 'src/libs';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent implements OnInit {\n\n  @Input() lang: any;\n  @Output() langChange: EventEmitter<any> = new EventEmitter();\n\n\n  constructor(private userService:UserService) { }\n\n  ngOnInit(): void {\n  }\n\n  toggleLogin(){\n    this.userService.login();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./navbar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<igx-navbar\n    title=\"Udemy Angular 9 Course\"\n    actionButtonIcon=\"home\"\n    [isActionButtonVisible]=\"true\">\n\n\n    <igx-select [value]=\"lang\" (onSelection)='langChange.emit($event.newSelection.value)'>\n        <igx-select-item value=\"tr\">Türkçe</igx-select-item>\n        <igx-select-item value=\"en\">İngilizce</igx-select-item>\n    </igx-select>\n    \n\n\n    <igx-icon>search</igx-icon>\n    <igx-icon (click)= \"toggleLogin()\">favorite</igx-icon>\n    <!--account-circle-->\n    <igx-icon>more_vert</igx-icon>\n\n    <igx-action-icon>\n        <igx-icon class=\"customIcon\" routerLink=\"home\">home</igx-icon>\n    </igx-action-icon>\n</igx-navbar>\n\n    \n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 64,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "Parent1Component",
            "id": "component-Parent1Component-937c77fdfb73c99853388c9971c61d43",
            "file": "src/app/parents/parent1/parent1.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-parent1",
            "styleUrls": [
                "./parent1.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./parent1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "calculaterData",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "child1",
                    "type": "Child1Component",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "Child1Component"
                        }
                    ]
                },
                {
                    "name": "name",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "successStatus",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "calculate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "resetParentForm",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Child1Component } from 'src/libs';\n\n@Component({\n  selector: 'app-parent1',\n  templateUrl: './parent1.component.html',\n  styleUrls: ['./parent1.component.scss']\n})\nexport class Parent1Component implements OnInit {\n\n  @ViewChild(Child1Component) child1: Child1Component;\n  name=\"\";\n  successStatus=0;\n  calculaterData;\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  calculate(){\n    this.calculaterData= {\n      name: this.name,\n      status: this.successStatus\n    };\n  }\n  resetParentForm(event){\n    alert(event);\n      this.name=\"\";\n      this.successStatus =0;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./parent1.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"margin:2rem;\">\n<div class=\"row\">\n    <div class=\"col-md-4\">\n        isim: <input type=\"text\" [(ngModel)]=\"name\">\n    </div>\n    <div class=\"col-md-4\">\n        başarı durumu:\n        <select [(ngModel)]=\"successStatus\">\n            <option value=\"0\">Seçiniz</option>\n            <option [ngValue]=\"true\" value=\"true\">Başarılı</option>\n            <option [ngValue]=\"false\" value=\"false\">Başarısız</option>\n        </select>\n    </div>\n    <div class=\"col-md-2\">\n         <button (click)=\"calculate()\">Çalıştır</button>\n    </div>\n    <div class=\"col-md-2\">\n        <button (click)=\"child1.alertSth()\">Child Component Trigger</button>\n   </div>\n</div>\n\n<div class=\"row\">\n    <div class=\"col-md-12\">\n        <app-child1 [data]=\"calculaterData\" (resetForm)=\"resetParentForm($event)\"></app-child1>\n    </div>\n</div>\n\n\n</div>\n"
        },
        {
            "name": "Parent2Component",
            "id": "component-Parent2Component-0b9334793be7cd28d2413d56c58130bc",
            "file": "src/app/parents/parent2/parent2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-parent2",
            "styleUrls": [
                "./parent2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./parent2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-parent2',\n  templateUrl: './parent2.component.html',\n  styleUrls: ['./parent2.component.scss']\n})\nexport class Parent2Component implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./parent2.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>parent2 works!</p>\n"
        },
        {
            "name": "PipesComponent",
            "id": "component-PipesComponent-e0b16bfef1d8dbb1b21f6653720bd150",
            "file": "src/app/pipes/pipes/pipes.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pipes",
            "styleUrls": [
                "./pipes.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pipes.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cash",
                    "defaultValue": "1500",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "cities",
                    "defaultValue": "[\n    \"istanbul\", \"izmir\", \"antalya\"]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "cityName",
                    "defaultValue": "\"istanbul\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "objectVal",
                    "defaultValue": "{\n    foo: \"bar\",\n    baz: \"qux\",\n    nested: { xyz: 3, numbers: [1, 2, 3]}\n  }",
                    "type": "Object",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "title",
                    "defaultValue": "\"aNkaRa türKiye\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "today",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "turkishUpperCaseVal",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-pipes',\n  templateUrl: './pipes.component.html',\n  styleUrls: ['./pipes.component.scss']\n})\nexport class PipesComponent implements OnInit {\n\n  title=\"aNkaRa türKiye\";\n  today;\n  turkishUpperCaseVal;\n  objectVal: Object ={\n    foo: \"bar\",\n    baz: \"qux\",\n    nested: { xyz: 3, numbers: [1, 2, 3]}\n  };\n  cityName = \"istanbul\";\n  cash = 1500;\n  cities = [\n    \"istanbul\", \"izmir\", \"antalya\"];\n  constructor() { }\n\n  ngOnInit() {\n    this.today = new Date().toDateString();\n    this.turkishUpperCaseVal = (this.title as any).toLocaleUpperCase(\"tr-TR\");\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./pipes.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 21
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\n    <div class=\"col-md-2\">\n        <h4>lowercase</h4>\n        <p>lowercase: {{title | lowercase}}</p>\n    </div>\n    <div class=\"col-md-2\">\n        <h4>lowercase</h4>\n        <p>titlecase: {{title | titlecase}}</p>\n    </div>\n     <div class=\"col-md-2\">\n        <h4>uppercase</h4>\n        <p>uppercase: {{title | uppercase}}</p>\n        <p>turkish uppercase: {{turkishUpperCaseVal}}</p>\n    </div>\n    <div class=\"col-md-4\">\n        <p>normal date : {{today | date: \"medium\"}}</p>\n        <p>pipe date : {{today | date: \"fullDate\"}}</p>\n        <p>turkish pipe date : {{today | date: \"fullDate\":\"\":\"tr-TR\"}}</p>\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"col-md-3\">\n        <h4>Json pipe</h4>\n        <pre>{{ objectVal | json }}</pre>\n    </div>\n    <div class=\"col-md-2\">\n        <h4>slice pipe</h4>\n        <p>normal hali : {{cityName}}</p>\n        <p>slice ve upper hali: {{cityName | uppercase | slice: 0:3 }}</p>\n    </div>\n    <div class=\"col-md-3\">\n        <h4>custom pipe</h4>\n        <p>{{cash | tl}}</p>\n        <br>\n        <h5>cities</h5>\n        <ul>\n            <li *ngFor=\"let city of cities | myFiltering : 'a'\">{{city}}</li>\n        </ul>\n    </div>\n    \n</div>\n\n"
        },
        {
            "name": "PlakaComponent",
            "id": "component-PlakaComponent-a96f81425f2bbf8da7282d2167f52d17",
            "file": "src/app/map/plaka/plaka.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-plaka",
            "styleUrls": [
                "./plaka.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./plaka.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "plakaData",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { MapService } from 'src/libs';\n\n@Component({\n  selector: 'app-plaka',\n  templateUrl: './plaka.component.html',\n  styleUrls: ['./plaka.component.scss']\n})\nexport class PlakaComponent implements OnInit {\n\n  plakaData;\n  constructor(private mapService: MapService) {\n    mapService.cityPlakaSubject.subscribe(data => {\n      this.plakaData = data;\n   });\n  }\n\n  ngOnInit() {\n    this.mapService.getCityPlakas();\n  }\n\n}\n\n\n//this.plakaData = this.mapService.getCityPlakas();",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./plaka.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mapService",
                        "type": "MapService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\n    <h4>Plakalar</h4>\n    <div class=\"col-md-12\">\n        <ul>\n            <li *ngFor=\"let city of plakaData\">{{ city.id }} - {{ city.name }} - {{ city.plaka }}</li>\n        </ul>\n    </div>\n</div>"
        },
        {
            "name": "RegionComponent",
            "id": "component-RegionComponent-e514317bcccc6acf6ced832109de490c",
            "file": "src/app/map/region/region.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-region",
            "styleUrls": [
                "./region.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./region.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "regionData",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { MapService } from 'src/libs';\n\n@Component({\n  selector: 'app-region',\n  templateUrl: './region.component.html',\n  styleUrls: ['./region.component.scss']\n})\nexport class RegionComponent implements OnInit {\n\n  regionData;\n  constructor(private mapService: MapService) {\n    mapService.cityRegionSubject.subscribe(data => {\n      this.regionData = data;\n  });\n  }\n  ngOnInit() {\n    this.mapService.getCityRegions();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./region.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mapService",
                        "type": "MapService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\n    <h4>Bölgeler</h4>\n    <div class=\"col-md-12\">\n        <ul>\n            <li *ngFor=\"let city of regionData\">{{ city.id }} - {{ city.name }} - {{ city.region }}</li>\n        </ul>\n    </div>\n</div>"
        },
        {
            "name": "RoleComponent",
            "id": "component-RoleComponent-5c2b7271bbaab08cc673a0698636faaa",
            "file": "src/app/role/role.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-role",
            "styleUrls": [
                "./role.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./role.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "rolesData",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "subs",
                    "defaultValue": "new SubSink()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "subs1",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "subs2",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "addNewRole",
                    "args": [
                        {
                            "name": "roleForm",
                            "type": "NgForm"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "roleForm",
                            "type": "NgForm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteRole",
                    "args": [
                        {
                            "name": "roleForm",
                            "type": "NgForm"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "jsdoctags": [
                        {
                            "name": "roleForm",
                            "type": "NgForm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editRole",
                    "args": [
                        {
                            "name": "roleForm",
                            "type": "NgForm"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "roleForm",
                            "type": "NgForm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { RoleService } from 'src/libs';\nimport { SubSink } from 'subsink';\n\n@Component({\n  selector: 'app-role',\n  templateUrl: './role.component.html',\n  styleUrls: ['./role.component.scss']\n})\nexport class RoleComponent implements OnInit, OnDestroy {\n\n  rolesData;\n  subs1 : Subscription;\n  subs2 : Subscription;\n  private subs = new SubSink();\n\n  constructor(private roleService: RoleService) { }\n\n  ngOnInit() {\n    this.getRoles();\n  }\n\n  ngOnDestroy() {\n    this.subs1.unsubscribe();\n    this.subs.unsubscribe();\n\n  }\n\n  getRoles(){\n    this.subs1 = this.roleService.getAllRoles().subscribe(data => {\n      this.rolesData = data;\n    });\n\n    this.subs.add(\n      this.roleService.getAllRoles().subscribe(data => {\n        this.rolesData = data;\n      }))\n    this.subs.add(\n      this.roleService.getAllRoles().subscribe(data => {\n        this.rolesData = data;\n      }),\n      this.roleService.getAllRoles().subscribe(data => {\n        this.rolesData = data;\n      })\n    );\n    }\n\n\n\n\n  addNewRole(roleForm: NgForm) {\n    this.subs.add(\n      this.roleService.addRole(roleForm.value).subscribe(\n        data => {\n          this.getRoles();\n        },\n        error => {\n          alert(\"something went wrong!\");\n        }\n      )\n    );\n    \n    \n    \n    \n    this.subs1.add(\n      this.roleService.addRole(roleForm.value).subscribe(\n      data => {\n        this.getRoles();\n      },\n      error => {\n        alert(\"something went wrong!\");\n      }\n    ));\n  }\n\n  editRole(roleForm: NgForm) {\n    this.roleService.addRole(roleForm.value).subscribe(\n      data => {\n        this.getRoles();\n      },\n      error => {\n        alert(\"something went wrong!\");\n      }\n    );\n  }\n\n  deleteRole(roleForm: NgForm) {\n    this.roleService.deleteRole(roleForm.value).subscribe(\n      data => {\n        this.getRoles();\n      },\n      error => {\n        alert(\"something went wrong!\");\n      }\n    );\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./role.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "roleService",
                        "type": "RoleService"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "roleService",
                        "type": "RoleService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"row\">\n    <div class=\"col-md-9 offset-md-3\">\n        <form #roleForm=\"ngForm\" class=\"form-group\" (ngSubmit)=\"addNewRole(roleForm)\">\n            \n            <label for=\"name\">id</label> <br>\n            <input type=\"text\" class=\"form-control\" name=\"id\" ngModel> <br>\n            <label for=\"name\">name</label> <br>\n            <br>\n            <input type=\"text\" class=\"form-control\" name=\"name\" ngModel> <br>\n            <button type=\"submit\">Kaydet</button>\n        </form>\n        <button (click)=\"editRole(roleForm)\">Düzenle</button>\n        <button (click)=\"deleteRole(roleForm)\">Sil</button>\n\n        \n    </div>\n</div>\n\n\n\n\n<ul>\n    <li *ngFor=\"let role of rolesData ? rolesData[0]?.data : []\">\n        id: {{role._id}} - name: {{role.name}}\n    </li>\n</ul>"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-6a913a1715984085104b1613c229e2c4",
            "file": "src/app/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidebar",
            "styleUrls": [
                "./sidebar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.scss']\n})\nexport class SidebarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sidebar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"content-wrap\">\n    <igx-nav-drawer id=\"navigation\" #drawer [isOpen]=\"true\">\n        <ng-template igxDrawer>\n            <nav>\n                <span igxDrawerItem [isHeader]=\"true\">Sidebar Listesi</span>\n                <span igxDrawerItem igxRipple [active]=\"true\" routerLink=\"home\">Home</span>\n                <span igxDrawerItem igxRipple routerLink=\"role\">Role</span>\n                <span igxDrawerItem igxRipple routerLink=\"user\"> User</span>\n                <span igxDrawerItem igxRipple routerLink=\"data-binding\">Data Binding</span>\n                <span igxDrawerItem igxRipple routerLink=\"storage\">Storage</span>\n                <span igxDrawerItem igxRipple routerLink=\"directives\">Directives</span>\n                <span igxDrawerItem igxRipple routerLink=\"pipes\">Pipes</span>\n                <span igxDrawerItem igxRipple routerLink=\"parents\">Parents</span>\n                <span igxDrawerItem igxRipple routerLink=\"forms\">Forms</span>\n                <span igxDrawerItem igxRipple routerLink=\"map\">Map</span>\n\n\n            </nav>\n        </ng-template>\n    </igx-nav-drawer>\n    <main>\n        \n    </main>\n</div>\n"
        },
        {
            "name": "UserComponent",
            "id": "component-UserComponent-f12647dbdb1b844bab4edfc8b51b3f69",
            "file": "src/app/user/user/user.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user",
            "styleUrls": [
                "./user.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.scss']\n})\nexport class UserComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>user works!</p>\n<router-outlet></router-outlet>"
        },
        {
            "name": "UserDetailsComponent",
            "id": "component-UserDetailsComponent-001a0fac4985ffa75d03b134b18b345f",
            "file": "src/app/user/user/user-details/user-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-details",
            "styleUrls": [
                "./user-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user-details',\n  templateUrl: './user-details.component.html',\n  styleUrls: ['./user-details.component.scss']\n})\nexport class UserDetailsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>user-details works!</p>\n"
        },
        {
            "name": "UserListComponent",
            "id": "component-UserListComponent-00dfaee8ef0f7027394d9f33939c6098",
            "file": "src/app/user/user-list/user-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-list",
            "styleUrls": [
                "./user-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "userData",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "getAllUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { UserService } from 'src/libs';\n\n@Component({\n  selector: 'app-user-list',\n  templateUrl: './user-list.component.html',\n  styleUrls: ['./user-list.component.scss']\n})\nexport class UserListComponent implements OnInit {\n  userData;\n  constructor(private userService: UserService) { }\n\n  ngOnInit() {\n    this.getAllUsers();\n  }\n\n  getAllUsers() {\n    this.userService.getAllUsers().subscribe(data =>{\n      this.userData=data\n    }, error =>{\n      alert(\"user listesi alınamadı\");\n      console.log(\"error\", error);\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ul>\n    <li *ngFor=\"let user of userData ? userData: []\">\n        name: {{user.name}} - surname: {{user.surname}}\n        - email: {{user.email}} - birthday : {{user.birthday | date: \"medium\":\"\":\"tr-TR\"}}\n    </li>\n</ul>\n"
        },
        {
            "name": "UserRoleComponent",
            "id": "component-UserRoleComponent-3b5c91a413b6b4aeea951461ed86b928",
            "file": "src/app/user/user/user-role/user-role.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-role",
            "styleUrls": [
                "./user-role.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-role.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user-role',\n  templateUrl: './user-role.component.html',\n  styleUrls: ['./user-role.component.scss']\n})\nexport class UserRoleComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user-role.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>user-role works!</p>\n"
        }
    ],
    "modules": [
        {
            "name": "AngularFormsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "UserService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthInterceptor"
                        },
                        {
                            "name": "UserService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "NavbarComponent"
                        },
                        {
                            "name": "SidebarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ChildModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "Child1Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "Child1Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DataBindingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DataBindingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DirectivesModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DirectivesComponent"
                        },
                        {
                            "name": "HighlightDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MapModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "MapService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CityComponent"
                        },
                        {
                            "name": "MapComponent"
                        },
                        {
                            "name": "PlakaComponent"
                        },
                        {
                            "name": "RegionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ParentsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "Parent1Component"
                        },
                        {
                            "name": "Parent2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ChildModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PipesModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MyFilteringPipe"
                        },
                        {
                            "name": "PipesComponent"
                        },
                        {
                            "name": "TlPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RoleModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "RoleService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RoleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StorageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CookieComponent"
                        },
                        {
                            "name": "LocalStorageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StorybookModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UserComponent"
                        },
                        {
                            "name": "UserDetailsComponent"
                        },
                        {
                            "name": "UserListComponent"
                        },
                        {
                            "name": "UserRoleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "BlackListValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/libs/custom-validators/blacklist.validator.ts",
                "type": "",
                "defaultValue": "(letter:string) => {\r\n    return (control : FormControl) => {\r\n        return control.value.toString().indexOf(letter) > -1 \r\n        ? {blacklist:true}\r\n        : null;\r\n    };\r\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  api: {\n    nestjs: {\n      role: \"http://udemy-nestjs-course.herokuapp.com/api\"\n    }\n  }\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  api: {\n    nestjs: {\n      role: \"http://udemy-nestjs-course.herokuapp.com/api\"\n    }\n  }\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "UserNameExistValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/libs/custom-validators/user-name-exist.validator.ts",
                "type": "",
                "defaultValue": "(\r\n    userService: any,\r\n    time: number = 500\r\n) => {\r\n    return(input: FormControl) => {\r\n        return timer(time).pipe(\r\n            switchMap(() => userService.isExistName(input.value)),\r\n            map(res => {\r\n                return !res? null: {userNameExist:true};\r\n            })\r\n        );\r\n    };\r\n}"
            }
        ],
        "functions": [
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "http"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "ctype": "miscellaneous",
                "subtype": "function",
                "file": "src/app/home/home.module.ts",
                "description": "",
                "args": [
                    {
                        "name": "http"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "WhiteSpaceValidator",
                "file": "src/libs/custom-validators/no-white-space.validator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "control"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "control",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/libs/custom-validators/blacklist.validator.ts": [
                {
                    "name": "BlackListValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/libs/custom-validators/blacklist.validator.ts",
                    "type": "",
                    "defaultValue": "(letter:string) => {\r\n    return (control : FormControl) => {\r\n        return control.value.toString().indexOf(letter) > -1 \r\n        ? {blacklist:true}\r\n        : null;\r\n    };\r\n}"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  api: {\n    nestjs: {\n      role: \"http://udemy-nestjs-course.herokuapp.com/api\"\n    }\n  }\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  api: {\n    nestjs: {\n      role: \"http://udemy-nestjs-course.herokuapp.com/api\"\n    }\n  }\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/libs/custom-validators/user-name-exist.validator.ts": [
                {
                    "name": "UserNameExistValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/libs/custom-validators/user-name-exist.validator.ts",
                    "type": "",
                    "defaultValue": "(\r\n    userService: any,\r\n    time: number = 500\r\n) => {\r\n    return(input: FormControl) => {\r\n        return timer(time).pipe(\r\n            switchMap(() => userService.isExistName(input.value)),\r\n            map(res => {\r\n                return !res? null: {userNameExist:true};\r\n            })\r\n        );\r\n    };\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/app.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "http"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/home/home.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "file": "src/app/home/home.module.ts",
                    "description": "",
                    "args": [
                        {
                            "name": "http"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/libs/custom-validators/no-white-space.validator.ts": [
                {
                    "name": "WhiteSpaceValidator",
                    "file": "src/libs/custom-validators/no-white-space.validator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "control"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "home",
                        "loadChildren": "./home/home.module#HomeModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/home/home.module.ts",
                                        "module": "HomeModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "HomeComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "HomeModule"
                            }
                        ]
                    },
                    {
                        "path": "role",
                        "loadChildren": "./role/role.module#RoleModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/role/role.module.ts",
                                        "module": "RoleModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "RoleComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "RoleModule"
                            }
                        ]
                    },
                    {
                        "path": "user",
                        "loadChildren": "./user/user.module#UserModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/user/user.module.ts",
                                        "module": "UserModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "UserListComponent"
                                            },
                                            {
                                                "path": ":id",
                                                "component": "UserComponent",
                                                "children": [
                                                    {
                                                        "path": "details",
                                                        "component": "UserDetailsComponent"
                                                    },
                                                    {
                                                        "path": "role",
                                                        "component": "UserRoleComponent"
                                                    }
                                                ],
                                                "canActivateChild": [
                                                    "AuthChildGuard"
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "UserModule"
                            }
                        ]
                    },
                    {
                        "path": "data-binding",
                        "loadChildren": "./data-binding/data-binding.module#DataBindingModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/data-binding/data-binding.module.ts",
                                        "module": "DataBindingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "DataBindingComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "DataBindingModule"
                            }
                        ]
                    },
                    {
                        "path": "storage",
                        "loadChildren": "./storage/storage.module#StorageModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "StorageModule"
                            }
                        ]
                    },
                    {
                        "path": "directives",
                        "loadChildren": "./directives/directives.module#DirectivesModule",
                        "canActivate": [
                            "AuthGuard"
                        ],
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/directives/directives.module.ts",
                                        "module": "DirectivesModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "DirectivesComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "DirectivesModule"
                            }
                        ]
                    },
                    {
                        "path": "pipes",
                        "loadChildren": "./pipes/pipes.module#PipesModule",
                        "canDeactivate": [
                            "AuthExitGuard"
                        ],
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pipes/pipes.module.ts",
                                        "module": "PipesModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "PipesComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "PipesModule"
                            }
                        ]
                    },
                    {
                        "path": "parents",
                        "loadChildren": "./parents/parents.module#ParentsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "ParentsModule"
                            }
                        ]
                    },
                    {
                        "path": "forms",
                        "loadChildren": "./forms/forms.module#AngularFormsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/forms/forms.module.ts",
                                        "module": "AngularFormsModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "FormsComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "AngularFormsModule"
                            }
                        ]
                    },
                    {
                        "path": "map",
                        "loadChildren": "./map/map.module#MapModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/map/map.module.ts",
                                        "module": "MapModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "MapComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "MapModule"
                            }
                        ]
                    },
                    {
                        "path": "**",
                        "component": "HomeComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/data-binding/data-binding.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DataBindingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/directives/directives.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DirectivesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/forms/forms.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.module.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/city/city.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CityComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map/map.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/map/plaka/plaka.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlakaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/map/region/region.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/parents/parent1/parent1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Parent1Component",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/parents/parent2/parent2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Parent2Component",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/pipes/pipes.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PipesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/role/role.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RoleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/storage/cookie/cookie.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CookieComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/storage/local-storage/local-storage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LocalStorageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/storybook/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/user/user-list/user-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/user/user/user-details/user-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/user/user/user-role/user-role.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserRoleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/user/user/user.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/libs/child-components/child1/child1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Child1Component",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/libs/custom-directives/highlight.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HighlightDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/libs/custom-pipes/my-filtering.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "MyFilteringPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/libs/custom-pipes/tl.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TlPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/libs/custom-validators/blacklist.validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BlackListValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/libs/custom-validators/no-white-space.validator.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "WhiteSpaceValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/libs/custom-validators/user-name-exist.validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UserNameExistValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/libs/guards/auth-child.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthChildGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/libs/guards/auth-exit.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthExitGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/libs/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/libs/interceptors/auth.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/libs/services/map.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MapService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/libs/services/map.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "city",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/libs/services/role.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RoleService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/libs/services/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}